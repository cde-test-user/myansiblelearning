===============================================================
Installation on Redhat #https://developers.redhat.com/blog/2016/09/02/how-to-install-and-configure-ansible-on-rhel/
===============================================================
rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
yum -y install ansible

====================================================================================
Ansible installation : https://www.itzgeek.com/how-tos/linux/ubuntu-how-tos/install-ansible-automation-tool-for-it-management-on-centos-7-ubuntu-14-04-fedora-22-part-1.html
====================================================================================
### CentOS 7 ###

yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
yum install -y ansible

### RHEL 7 ###

subscription-manager repos --enable rhel-7-server-ansible-2.6-rpms
yum install -y ansible

### Ubuntu 18.04 / Ubuntu 16.04 ###

Step 1.Create VM Ansible Master (ansiblemaster)
Step 2.Install ansible on the ansiblemaster using the below steps

sudo apt-get update
sudo apt-get install software-properties-common 
sudo apt-add-repository ppa:ansible/ansible
sudo apt-get update 
sudo apt-get install -y ansible
ansible --version

Step 2. Create VM Ansible Node 1 (ansiblenode1)
Step 3. Install python on it if not present.
sudo apt-get install python and then run which python to confirm.

Step 4.Create the RSA key pair on ansiblemaster 
ssh-keygen (press enter ,enter )

Output
Your identification has been saved in /your_home/.ssh/id_rsa.
Your public key has been saved in /your_home/.ssh/id_rsa.pub.
The key fingerprint is:

Step 5 — Copy the Public Key to ansiblenode1
Copying Public Key Using ssh-copy-id >> ssh-copy-id <your-username>@ansiblenode1

Output
The authenticity of host '203.0.113.1 (203.0.113.1)' can't be established.
ECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe.
Are you sure you want to continue connecting (yes/no)? yes  (press enter)

Step 6 — Authenticate to ansiblenode1 Using SSH Keys
ssh <your-username>@ansiblenode1

Step 7. Add the ansiblenode1 entry to the default hosts file at location /etc/ansible/hosts
for e.g
[webservers]
ansiblenode1 


Step 7. Run the following command on ansiblemaster
ansible -v ansiblenode1 -m ping -u <your-username-for-ansiblenode1>

=====================================================================================================



ansible 2.7.4
  config file = /etc/ansible/ansible.cfg
  configured module search path = [u'/home/ansible/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']
  ansible python module location = /usr/lib/python2.7/dist-packages/ansible
  executable location = /usr/bin/ansible
  python version = 2.7.15rc1 (default, Nov 12 2018, 14:31:15) [GCC 7.3.0]
===========================================================================================
Your identification has been saved in /home/ansible/.ssh/id_rsa.
Your public key has been saved in /home/ansible/.ssh/id_rsa.pub.

ssh-copy-id ansiblenode1@ansiblenode1-VirtualBox

Check if ssh if running on ansiblenode1-VirtualBox using the cmd sudo systemctl status ssh.service

ssh 'ansiblenode1@ansiblenode1-VirtualBox'

ssh-copy-id ansiblenode1@ansiblenode1-VirtualBox

ansible -i inventory.txt -m ping all -u ansiblenode1
ansible -v ansiblenode1-VirtualBox -m ping -u ansiblenode1

ansible-playbook -i inventory.txt sample-playbook-1.yml -u ansiblenode1

============================================================================================
# Ansible directory struture https://dev.to/tmidi/ansible-directory-layout-5edj

mkdir -p group_vars host_vars library module_utils filter_plugins
mkdir -p roles/common/{tasks,handlers,templates,files,vars,defaults,meta,library,module_utils,lookup_plugins}
touch production staging site.yml roles/common/{tasks,handlers,templates,files,vars,defaults,meta}/main.yml

=====================================
Ansible commands :
=====================================
1. Cmd to check the playbook status : ansible-playbook playbook.yml --syntax--check

===================================
Ansible Vault
===================================
A typical use of Ansible Vault is to encrypt variable files. Vault can encrypt any YAML file, but the most common files to encrypt are:
Files within the group_vars directory
A role's defaults/main.yml file
A role's vars/main.yml file
Any other file used to store variables.

Let's see how to to use Ansible Vault with some variable files.
# Encrypt a role's defaults/main.yml file
ansible-vault encrypt defaults/main.yml

> New Vault password: 
> Confirm New Vault password: 
> Encryption successful

Creating an Encrypted File
ansible-vault create defaults/extra.yml
> New Vault password: 
> Confirm New Vault password:

Decrypting a File
You can decrypt a file to get it back to plaintext as well:

ansible-vault decrypt defaults/main.yml
> Vault password:
---------------------------------
Ansible 2.4+ and vault-id
--------------------------------
For Ansible 2.4+, ansible-vault works a little differently, using the --vault-id flag. The advantage of vault-id is that you can pass in multiple vault passwords or password files, in case you have files encrypted with different passwords.
This expects to use a file. Here we see editing a file using --vault-id:

ansible-vault --vault-id ./vault_password_file edit defaults/main.yml


